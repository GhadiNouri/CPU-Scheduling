#include <stdio.h>
void FCFS(int n, int bt[], int wt[],int arr);
void SJF(int n, int bt[],int p[], int wt[]);
void PRIORITY(int n, int bt1[],int p1[], int wt1[]);
int main()
{
printf("Enter How many processes: ");
int n;
scanf("%d",&n);
int bt[n]; //burst time
int wt[n]; //waiting time
int p[n]; //process number
int bt1[n]; // copy of the arrays
int wt1[n];
int p1[n];
for (int i = 0; i < n ; i++ ) // take burst time from user
{
printf("Enter CPU time for P%d: ",i+1);
scanf("%d",&bt[i]);
p[i]=i+1;
}
for (int i = 0; i < n ; i++ ) // copy contents in another array
{
bt1[i]=bt[i];
wt1[i]=wt[i];
p1[i]=p[i];
}
int arr=0; //arrival time for all processes is 0
// apply functions for each algorithm
FCFS(n,bt,wt,arr);
SJF(n,bt,p,wt);
PRIORITY(n,bt1,p1,wt1);
return 0;
}
void FCFS(int n, int bt[], int wt[],int arr){
wt[0]=0; //waiting time for first process is always 0
for (int i = 1; i < n ; i++ ) //calculating waiting time for each process
{
wt[i]=bt[i-1]+arr;
arr=wt[i];
}
printf( "\n\t First Come First Served Scheduling\n");
double totalw=0.0;
for (int i = 1; i < n ; i++ ) //total waiting time
totalw+=wt[i];
printf("\nProcesses \tCPU Time\tWaiting Time \n"); //output
for(int i=0;i<n;i++)
{
printf("\nP %d\t\t %d\t\t %d",i+1,bt[i],wt[i]);
}
double avg=totalw/n; // average waiting time total/number of processes
printf("\n\nAverage Waiting Time %.2f \n",avg);
}
void SJF(int n, int bt[],int p[], int wt[]){
int i,j,k=0,min,temp ;
double total=0.0;
//sorting of burst times
for(i=0;i<n;i++)
{
min=i; // step 1) set min to the first location
for(j=i+1;j<n;j++)
{
if(bt[j]<bt[min]) // step 2) search the minimum element in bt[]
min=j;
}
temp=bt[i]; // step 3) swap the first location with the minimum value in bt[]
bt[i]=bt[min];
bt[min]=temp;
temp=p[i]; // step 4) swap process number p[] and repeat the steps
p[i]=p[min];
p[min]=temp;
}
wt[0]=0;
int arr=0;
for (int i = 1; i < n ; i++ ) //calculating waiting time for each process
{
wt[i]=bt[i-1]+arr;
arr=wt[i];
}
for (int i = 1; i < n ; i++ ) //total waiting time
total+=wt[i];
for(i=0;i<n;i++)
{
min=i;
for(j=i+1;j<n;j++)
{
if(p[j]<p[min])
min=j;
}
temp=bt[i];
bt[i]=bt[min];
bt[min]=temp;
temp=p[i];
p[i]=p[min];
p[min]=temp;
temp=wt[i];
wt[i]=wt[min];
wt[min]=temp;
}
//display results
printf( "\n\t Shortest Job First Scheduling \n");
printf("\nProcesses \tCPU Time\tWaiting Time \n"); //output
for(i=0;i<n;i++)
{
printf("\nP %d\t\t %d\t\t %d",p[i],bt[i],wt[i]);
}
double avg=total/n; // calculate average
printf("\n\nAverage Waiting Time %.2f \n",avg);
}
void PRIORITY(int n, int bt1[],int p1[], int wt1[]){
int pr1[n],i,j,k=0,min,temp;
double avg, total=0.0;
for(i=0;i<n;i++)
{
printf("\nEnter priority for P[%d]: ",i+1);
scanf("%d",&pr1[i]);
p1[i]=i+1; //contains process number
}
//sorting burst time, priority and process number in ascending order using selection sort
for(i=0;i<n;i++)
{
min=i;
for(j=i+1;j<n;j++)
{
if(pr1[j]<pr1[min])
min=j;
}
temp=pr1[i];
pr1[i]=pr1[min];
pr1[min]=temp;
temp=bt1[i];
bt1[i]=bt1[min];
bt1[min]=temp;
temp=p1[i];
p1[i]=p1[min];
p1[min]=temp;
}
wt1[0]=0; //waiting time for first process is zero
int arr=0;
for (int i = 1; i < n ; i++ ) //calculate waiting time
{ wt1[i]=bt1[i-1]+arr;
arr=wt1[i];}
for (int i = 1; i < n ; i++ )
total=wt1[i]+total;
for(i=0;i<n;i++)
{
min=i;
for(j=i+1;j<n;j++)
{
if(p1[j]<p1[min])
min=j;
}
temp=pr1[i];
pr1[i]=pr1[min];
pr1[min]=temp;
temp=bt1[i];
bt1[i]=bt1[min];
bt1[min]=temp;
temp=p1[i];
p1[i]=p1[min];
p1[min]=temp;
temp=wt1[i];
wt1[i]=wt1[min];
wt1[min]=temp;
}
printf( "\n\t Priority Scheduling \n");
printf("\nProcesses \tPriority\tCPU Time\tWaiting Time \n"); //output
for(i=0;i<n;i++)
{
printf("\nP %d\t\t %d\t\t %d\t\t %d",p1[i],pr1[i],bt1[i],wt1[i]);
}
avg=total/n;
printf("\n\nAverage Waiting Time %.2f \n",avg);
}
